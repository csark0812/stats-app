{"ast":null,"code":"var _jsxFileName = \"/Users/csark0812/Documents/stats-app/frontend/src/components/Seasons.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport api from './api';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Seasons = () => {\n  _s();\n  const [activeSeasons, setActiveSeasons] = useState([]);\n  const [pastSeasons, setPastSeasons] = useState([]);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const togglePopup = () => {\n    setIsPopupOpen(!isPopupOpen);\n  };\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Make the API call to fetch the list of leagues\n    const selectedLeagueId = JSON.parse(sessionStorage.getItem('league')).league_id;\n    api.get('/seasons/', {\n      params: {\n        league: selectedLeagueId\n      }\n    }).then(response => {\n      setActiveSeasons(response.data.filter(season => !season.is_complete));\n      setPastSeasons(response.data.filter(season => season.is_complete));\n    }).catch(error => {\n      console.error('Error fetching seasons:', error);\n    });\n  }, []); // Empty dependency array ensures the effect runs only once\n\n  const handleSeasonClick = seasonId => {\n    const selectedLeagueId = JSON.parse(sessionStorage.getItem('league')).league_id;\n    const selectedLeagueName = JSON.parse(sessionStorage.getItem('league')).name;\n    api.get('/seasons/', {\n      params: {\n        league_id: selectedLeagueId,\n        season_id: seasonId\n      }\n    }) // Make the API call with league_id as a parameter\n    .then(response => {\n      const season = response.data[0]; // Assuming the response is a list with one league\n      sessionStorage.setItem('season', JSON.stringify(season));\n      console.log(season.name);\n      navigate(`/${encodeURIComponent(selectedLeagueName)}/${encodeURIComponent(season.name)}`);\n    }).catch(error => {\n      console.error('Error fetching league:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Active Seasons List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: activeSeasons.map(season => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSeasonClick(season.season_id),\n          children: season.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, season.season_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Past Seasons List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: pastSeasons.map(season => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSeasonClick(season.season_id),\n          children: season.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, season.season_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Seasons, \"QGuCk0OfTyoCCilCb5n1OsBVoL0=\", false, function () {\n  return [useNavigate];\n});\n_c = Seasons;\nexport default Seasons;\nvar _c;\n$RefreshReg$(_c, \"Seasons\");","map":{"version":3,"names":["React","useState","useEffect","api","useNavigate","jsxDEV","_jsxDEV","Seasons","_s","activeSeasons","setActiveSeasons","pastSeasons","setPastSeasons","isPopupOpen","setIsPopupOpen","togglePopup","navigate","selectedLeagueId","JSON","parse","sessionStorage","getItem","league_id","get","params","league","then","response","data","filter","season","is_complete","catch","error","console","handleSeasonClick","seasonId","selectedLeagueName","name","season_id","setItem","stringify","log","encodeURIComponent","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","_c","$RefreshReg$"],"sources":["/Users/csark0812/Documents/stats-app/frontend/src/components/Seasons.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport api from './api';\nimport { useNavigate } from 'react-router-dom';\n\n\nconst Seasons = () => {\n  const [activeSeasons, setActiveSeasons] = useState([]);\n  const [pastSeasons, setPastSeasons] = useState([]);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n\n  const togglePopup = () => {\n    setIsPopupOpen(!isPopupOpen);\n  };\n  const navigate = useNavigate()\n  useEffect(() => {\n    // Make the API call to fetch the list of leagues\n    const selectedLeagueId = JSON.parse(sessionStorage.getItem('league')).league_id;\n\n    api.get('/seasons/', { params: { league: selectedLeagueId} })\n      .then(response => {\n        setActiveSeasons(response.data.filter(season => !season.is_complete));\n        setPastSeasons(response.data.filter(season => season.is_complete));\n      })\n      .catch(error => {\n        console.error('Error fetching seasons:', error);\n      });\n  }, []); // Empty dependency array ensures the effect runs only once\n  \n  const handleSeasonClick = (seasonId) => {\n    const selectedLeagueId = JSON.parse(sessionStorage.getItem('league')).league_id;\n    const selectedLeagueName = JSON.parse(sessionStorage.getItem('league')).name;\n\n    api.get('/seasons/', { params: { league_id: selectedLeagueId, season_id: seasonId } }) // Make the API call with league_id as a parameter\n      .then(response => {\n        const season = response.data[0]; // Assuming the response is a list with one league\n        sessionStorage.setItem('season', JSON.stringify(season));\n        console.log(season.name)\n        navigate(`/${encodeURIComponent(selectedLeagueName)}/${encodeURIComponent(season.name)}`);\n      })\n      .catch(error => {\n        console.error('Error fetching league:', error);\n      });\n  };\n\n  return (\n    <div>\n      <h2>Active Seasons List</h2>\n      <ul>\n        {activeSeasons.map(season => (\n          <li key={season.season_id}> \n            <button   onClick={() => handleSeasonClick(season.season_id)}>{season.name}</button>\n          </li>\n        ))}\n      </ul>\n      <h2>Past Seasons List</h2>\n      <ul>\n        {pastSeasons.map(season => (\n          <li key={season.season_id}> \n            <button   onClick={() => handleSeasonClick(season.season_id)}>{season.name}</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Seasons;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}